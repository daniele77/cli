/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>
#include "cli/filehistorystorage.h"

using namespace cli;

BOOST_AUTO_TEST_SUITE(FileHistoryStorageSuite)

BOOST_AUTO_TEST_CASE(Basics)
{
    FileHistoryStorage s("cli_test_history", 10);
    s.Clear(); // in case the test runs multiple times

    // starts empty
    BOOST_CHECK(s.Commands().empty());

    const std::vector<std::string> v = { "item1", "item2", "item3", "item4", "item5", "item6" };
    s.Store(v);
    auto result = s.Commands();
    BOOST_CHECK_EQUAL_COLLECTIONS(v.begin(), v.end(), result.begin(), result.end());

    const std::vector<std::string> v2 = { "itemA", "itemB", "itemC", "itemD", "itemE", "itemF" };
    s.Store(v2);
    result = s.Commands();
    const std::vector<std::string> expected = { "item3", "item4", "item5", "item6", "itemA", "itemB", "itemC", "itemD", "itemE", "itemF" };
    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), result.begin(), result.end());
}

BOOST_AUTO_TEST_CASE(Persistence)
{
    FileHistoryStorage s("cli_test_history", 10);
    s.Clear(); // in case the test runs multiple times
    
    // starts empty
    BOOST_CHECK(s.Commands().empty());

    const std::vector<std::string> v = { "item1", "item2", "item3", "item4", "item5", "item6" };
    s.Store(v);
    auto result = s.Commands();
    BOOST_CHECK_EQUAL_COLLECTIONS(v.begin(), v.end(), result.begin(), result.end());

    const std::vector<std::string> v2 = { "itemA", "itemB", "itemC", "itemD", "itemE", "itemF" };
    s.Store(v2);
    result = s.Commands();
    const std::vector<std::string> expected = { "item3", "item4", "item5", "item6", "itemA", "itemB", "itemC", "itemD", "itemE", "itemF" };
    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), result.begin(), result.end());

    // another object, same file => same result

    FileHistoryStorage s2("cli_test_history", 10);
    result = s2.Commands();
    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), result.begin(), result.end());

    s2.Clear();
    BOOST_CHECK(s2.Commands().empty()); // check clear
}

BOOST_AUTO_TEST_SUITE_END()