/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_CLILOCALSESSION_H
#define CLI_CLILOCALSESSION_H

#include <ostream> // std::ostream
#include "detail/keyboard.h"
#include "detail/inputhandler.h"
#include "cli.h" // CliSession

namespace cli
{

class Scheduler; // forward declaration

/**
 * @brief CliLocalTerminalSession represents a local session.
 * You should instantiate it to start an interactive prompt on the standard
 * input/output of your application.
 * The handlers of the commands will be invoked in the same thread the @c Scheduler runs. 
 */
class CliLocalTerminalSession : public CliSession
{
public:

    /**
     * @brief Construct a new Cli Local Terminal Session object that uses the specified @c std::ostream
     * for output. You can also specify a size for the command history. 
     * 
     * @param _cli The cli object that defines the menu hierarchy for this session
     * @param scheduler The scheduler that will process the command handlers
     * @param _out the output stream where command output will be printed
     * @param historySize the size of the command history
     */
    CliLocalTerminalSession(Cli& _cli, Scheduler& scheduler, std::ostream& _out, std::size_t historySize = 100) :
        CliSession(_cli, _out, historySize),
        kb(scheduler),
        ih(*this, kb)
    {
        Prompt();
    }

private:
    detail::Keyboard kb;
    detail::InputHandler ih;
};

using CliLocalSession = CliLocalTerminalSession;

} // namespace cli

#endif // CLI_CLILOCALSESSION_H

