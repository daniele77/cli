/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <boost/test/unit_test.hpp>
#include "cli/cli.h"

using namespace std;
using namespace cli;
using namespace cli::detail;

BOOST_AUTO_TEST_SUITE(MenuSuite)

BOOST_AUTO_TEST_CASE(Basics)
{
    Menu menu("menu");
    menu.Insert("aaa", [](ostream&){});
    menu.Insert("bbb", [](ostream&){});
    menu.Insert("aaa_bbb", [](ostream&){});
    menu.Insert("aaa_ccc", [](ostream&){});

    auto subMenu = make_unique<Menu>("submenu");
    auto subSubMenu = make_unique<Menu>("subsubmenu");
    subSubMenu->Insert("bar", [](ostream&){});
    subMenu->Insert(move(subSubMenu));
    subMenu->Insert("foo", [](ostream&){});
    menu.Insert(move(subMenu));
    
    /*
        menu
        +-- aaa
        +-- bbb
        +-- aaa_bbb
        +-- aaa_ccc
        +-- submenu
            +-- foo
            +-- subsubmenu
                +-- bar
    */

    // GetCompletions returns:
    // - the completions of this menu command
    // - the recursive completions of subcommands
    // - the recursive completions of parent menu

    // GetCompletionRecursive returns:
    // - the completion of this menu command
    // - the recursive completions of the subcommands

    auto completions = menu.GetCompletions("");
    vector<string> expected({"aaa", "bbb", "aaa_bbb", "aaa_ccc", "submenu"});
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletions("aaa");
    expected = {"aaa", "aaa_bbb", "aaa_ccc"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletions("aaa_b");
    expected = {"aaa_bbb"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletions("b");
    expected = {"bbb"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletions("submenu");
    expected = {"submenu subsubmenu", "submenu foo"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

/*
    TODO: unfortunately, this won't work because we have moved subMenu into root menu

    completions = subMenu->GetCompletions("");
    expected = {"menu", "foo", "subsubmenu"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());
*/

    completions = menu.GetCompletionRecursive("");
    expected = {"menu"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletionRecursive("me");
    expected = {"menu"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletionRecursive("menu");
    expected = {"menu aaa", "menu bbb", "menu aaa_bbb", "menu aaa_ccc", "menu submenu"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletionRecursive("menu a");
    expected = {"menu aaa", "menu aaa_bbb", "menu aaa_ccc"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());

    completions = menu.GetCompletionRecursive("menu submenu");
    expected = {"menu submenu subsubmenu", "menu submenu foo"};
    BOOST_CHECK_EQUAL_COLLECTIONS(completions.begin(), completions.end(), expected.begin(), expected.end());
}

BOOST_AUTO_TEST_SUITE_END()