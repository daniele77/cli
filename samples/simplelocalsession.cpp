/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2018 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include "cli/cli.h"
#include "cli/clifilesession.h"



int main()
{
	using namespace cli;
	using namespace std;
	// setup cli

    auto rootMenu = make_unique< menu_type >( "cli" );
    rootMenu -> Add(
            "word",
            [](std::string str_val , std::ostream& out){ out << std::boolalpha << "string value is: \"" << str_val << "\" \n"; },
            "The string argument type is accepted. Only one word currently, with no spaces/");
    rootMenu -> Add(
            "char",
            [](char char_val , std::ostream& out){ out << std::boolalpha << "char value is: " << char_val << " \n"; },
            "The char argument type is accepted. No single quotes, just type one char.");
	rootMenu-> Add(
		    "bool",
            [](bool bool_val , std::ostream& out){ out << std::boolalpha << "The truth is: " << bool_val << " \n"; },
            "For the bool argument accepted values are: 0. 1, true, false, T or F,  otherwise bool false" );
    rootMenu -> Add(
            "hello_everysession",
            [](std::ostream&){ cli_type::cout() << "Hello, everybody" << std::endl; },
            "Print hello everybody on all open sessions" );
    rootMenu -> Add(
            "plus2",
            [](int x, double  y, std::ostream& out){ out << "The answer is: " << (x + y )<< "\n"; },
            "Apply + to 2 arguments" );
    rootMenu -> Add(
            "plus3",
            [](int x, double  y, short z, std::ostream& out){ out << "The answer is: " << (x + y + z )<< "\n"; },
            "Apply + to 3 arguments" );
    rootMenu -> Add(
            "plus4",
            [](int x, double  y, short z, long w, std::ostream& out){ out << "The answer is: " << (x + y + z + w )<< "\n"; },
            "Apply + to 4 arguments" );
    rootMenu -> Add(
            "color",
            [](std::ostream& out){ out << "Colors ON\n"; SetColor(); },
            "Enable colors in the cli" );
    rootMenu -> Add(
            "nocolor",
            [](std::ostream& out){ out << "Colors OFF\n"; SetNoColor(); },
            "Disable colors in the cli" );

    auto subMenu = make_unique< menu_type >( "sub" );
    subMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, submenu world\n"; },
            "Print hello world in the submenu" );
    subMenu -> Add(
            "demo",
            [](std::ostream& out){ out << "This is a sample!\n"; },
            "Print a demo string" );

    auto subSubMenu = make_unique< menu_type >( "subsub" );
        subSubMenu -> Add(
            "hello",
            [](std::ostream& out){ out << "Hello, subsubmenu world\n"; },
            "Print hello world in the sub-submenu" );
    subMenu -> Add( std::move(subSubMenu));

    rootMenu -> Add( std::move(subMenu) );


    cli_type cli( std::move(rootMenu) );
    // global exit action
    cli.ExitAction( [](auto& out){ out << "Goodbye and thanks for all the fish.\n"; } );

    cli_file_session input(cli);
    input.Start();

    return 0;
}
